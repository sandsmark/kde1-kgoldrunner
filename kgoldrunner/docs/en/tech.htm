<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<TITLE>The KGoldrunner User's Guide: Technical Details</TITLE>
<META HTTP-EQUIV="content-type" CONTENT="text/html; charset=iso-8859-1">
<META NAME="keywords" CONTENT="KGoldrunner">
<META NAME="description" CONTENT="Documentation for KGoldrunner">
</HEAD>

<BODY BGCOLOR="#ffffff" LINK="#8E2727" VLINK="#8E2727" TEXT="#000000" > 
<FONT FACE="Arial,Helvetica">
<TABLE BORDER=0 CELLSPACING=2>
<TR><TD><IMG SRC="kgoldrunner.png" BORDER="0" ALT="KGoldrunner" ALIGN="TEXTTOP">
</TD><TD><H2>KGoldrunner - Technical Details</H2></TD></TR>
</TABLE>

<TABLE WIDTH="600" CELLSPACING=0 CELLPADDING=0>
<TR><TD>
<P ALIGN="RIGHT">
<A HREF="index.htm">HOME</A> |
<B>Previous</B> <A HREF="install.htm">Installation</A>
<HR WIDTH="600" SIZE=2 ALIGN="LEFT" NOSHADE>
</P>
This section is aimed at programmers who wish to work on KGoldrunner
as a developer or port it to other operating systems and desktops.  Before
starting, please contact the authors, to make sure you have the latest
versions  of the distribution files (email addresses are in the "Help,
About KGoldrunner" menu option message).  Also, have a look at the
<A HREF="install.htm">Installation</A> section of this document.
<H3>Compiling and Building KGoldrunner as a Developer</H3>
The <A HREF="install.htm">Installation</A> section describes how
to install KGoldrunner into the KDE system directories.  To
install it into your own area, proceed similarly, but log in as
yourself, use one of your own working directories and omit the
"make install" command.
<P>
If you are familiar with the KDevelop IDE
(Integrated Development Environment), there is a "kgoldrunner.kdevprj"
project definition file in the "kgoldrunner-V-kdeN" directory (where V
is the KGoldrunner version and N is 1 or 2).
<H3>Accessing the Documentation and Games Data Files</H3>
You will find the English documentation files in
"kgoldrunner-V-kdeN/kgoldrunner/docs/en"
and the games data files in "kgoldrunner-V-kdeN/kgoldrunner/system".
<P>
Among the games data files is one called "levels.tar".  If you need to
add to the released levels, use the command "tar xf levels.tar" to unpack
the levels files into sub-directory "levels".  Repack them using the
command "tar cf levels.tar levels".  The text-file "games.dat" will
also need to be edited or replaced.  It contains a summary of the
files in the "levels" directory (prefixes and counts) and it must
be consistent.
<P>
When you run KGoldrunner, you will normally access the levels files and
documentation installed in the KDE system.  For most purposes it will be
enough to keep new games and levels in the <U>User</U> area KGoldrunner
already provides, while you are editing and testing them.  The relevant
files are saved in your home directory structure in ".kde/share/apps/kgoldrun"
in KDE 1 or ".kde2/share/apps/kgoldrun/user" in
KDE 2.  If you are changing the documentation, you can access your
development version from KGoldrunner by typing in the full path the first
time, then saving it as a bookmark.
<P>
If you have to access the copies of <U>System</U> games data and levels in your
development area, you will need to mimic the KDE "share/apps" directory
structure somewhere in your directory area.  Either copy or preferably
<U>link</U> the games and levels sub-directories into that structure at
the correct point.  Now, in KDE 1, you execute KGoldrunner with KDEDIR
temporarily defined to your structure's base, e.g.:
<P>
<PRE>
        KDEDIR=$HOME/mydir ./kgoldrunner
</PRE>
<P>
In KDE 2, there is no KDEDIR, but there is a "path" variable KDEDIRS for
finding application data files.  Set it by using:
<P>
<PRE>
        export KDEDIRS=$HOME/mydir:$KDEDIRS
</PRE>
<P>
then you can simply use "./kgoldrunner" to execute.
<H3>Keeping Versions in Sync</H3>
Please note that there is really only <U>one</U> set of source files,
graphics files, games files, levels files and documentation for KGoldrunner,
even though it is distributed as two sets, one for KDE 1 and one for
KDE 2.  Only the "make", "configuration" and "project" files are
different.  So if you change anything, please make certain that it is
changed in <U>both</U> distributions.
<P>
Also, only the KDE 2 version
contains the CVS (Concurrent Version control) repositories and you
should "commit" all your changes to them when you finish your work.
<H3>Makefiles, KDevelop, "automake" and "autoconf"</H3>
When you install KGoldrunner, each directory in the uncompressed
distribution files has "Makefile"s which contain specifications for
compiling, building and installing the software and files, but these
"Makefile"s have been generated by the "./configure" script and are
tailored to fit your system.  Therefore you should <U>not</U> edit and
re-distribute the "Makefile"s, even if you know how!
<P>
The best approach is to use KDevelop, which generates all the right
files for each directory in your project and allows you to "register"
new files for compilation, distribution or installation, whereupon
references to them get incorporated into the generated files.  The
files generated by KDevelop are "Makefile.am", "Makefile.in" and
"Makefile" in each project directory and "configure.in", "acinclude.m4",
"aclocal.m4" and "configure" in the top directory.  All of these, except
for "Makefile", are distributed.
<P>
The base files are "Makefile.am" and "configure.in".  If you want to
add to the rules KDevelop generates automatically, these are the files
you need to change, but <U>avoid</U> the sections between comments that
KDevelop overwrites.
<P>
The released "Makefile.am" files contain a few such changes, e.g. to
implement "make init", to unpack the levels after "levels.tar" has been
installed and to uninstall the levels files and "kgoldrun" directories.
<P>
KDevelop uses "automake" to generate "Makefile.in" files from "Makefile.am"
and "autoconf" to generate the "configure" script from "config.in", then
it uses the "configure" script to generate "Makefile" from "Makefile.in".  If
you wish, you can do these steps yourself, provided you start by changing
only "Makefile.am" and "config.in".
<H3>Where to Find KDevelop, "automake" and "autoconf"</H3>
KDevelop, "automake" and "autoconf" are (or should be) packages in your
Linux distribution.  When you install the KDevelop package, "automake"
and "autoconf" are installed automatically (or should be).  Once installed,
KDevelop has extensive and readable built-in documentation.
<P>
When "automake" and "autoconf" are installed, the documentation can be
found in the
"info" documentation browser, which also has a very good writeup on
"Make" (a "must read", if you are going to make much sense of the
"automake" and "autoconf" documents).  Also in "info", see "Standards"
(section "Managing Releases", sub-sections "Configuration" and
"Makefile Conventions") for further background information.
<H3>Portability Concerns</H3>
In KDE 1, KGoldrunner is heavily dependent on KDE object and
GUI libraries and so is not portable.
<P>
In KDE 2, there is just <U>one</U> procedure, "getDirectories", that
depends on KDE.  It locates the directories where the documentation,
games and levels are stored.  Everything else depends only on Qt 2
and C++ and so should be portable to other operating systems.
<P>
To assist portability further, most file names have been kept down to
8 characters (alphanumeric and underscore only) and file extensions
have been kept down to 3 characters (e.g. ".htm" for documentation,
rather than ".html").
<H3>Compilation Concerns</H3>
When changing from KDE 1 to KDE 2, the KDE libraries introduced
source-code incompatibilities and so did the Qt library when going
from Qt 1 to Qt 2.  This meant that the definitions of some classes
changed and source code depending on those classes had to change
too.  KGoldrunner v1.0 has source code that can be compiled either with
KDE 1 and Qt 1 or with KDE 2 and Qt 2.  Dual compilation depends on
three approaches:
<UL>
<LI>Defining (or not defining) the pre-processor variable "QT1" (in
the KDE 1 version "QT1" is defined in the "Makefile.am" and ultimately
in the "Makefile"),
</LI>
<LI>Defining some compile-time macros, "myStr", "myChar" and "endData",
that smooth out the differences between Qt 1 and Qt 2 classes when
handling strings, characters and end-of-file conditions,
</LI>
<LI>Using the comments "// QT1_ONLY" and "// QT2PLUS_ONLY" to flag lines
that cannot be handled by the first two methods and so have to be modified
by "make init".
</LI>
</UL>
Regarding the last point, the Qt pre-processor (the MOC compiler) cannot
handle C++ pre-processor directives (such as "#ifdef QT1",
"#else" and "#endif").  Left to itself, it will process both the Qt 1
and Qt 2 versions of certain lines and cause compile-time errors.  So
in KDE 1 the script "fix_src" adds a comment (//) to lines containing
the "QT2PLUS_ONLY" string and removes it from lines containing the
"QT1_ONLY" string.  It does the opposite in KDE 2.  If the source
files have already been changed, "fix_src" has no effect, so you can
run it anytime without worrying about whether it has been run before.
<P>
The script requires a string parameter that ends in "kde1" or "kde2".  In
the "make init" rule, which runs "fix_src", this parameter is supplied by
the Makefile's VERSION variable, as set up in the KDevelop project
definition (e.g. "1.0-kde1" or "1.0-kde2").
<H3>Danger: Software Interrupts</H3>
KGoldrunner is controlled by outside events, such as timer events, mouse
clicks, keystrokes and window management actions.  Any of these can happen
at any moment, depending on the whims of the user and the demands of the
animation.  Qt also has a very handy "signal and slot" mechanism, which
is used extensively in KGoldrunner.
<P>
Ordinarily, Qt will not execute event-handling procedures and slots
until you return from the current procedure and Qt resumes control
(i.e. events are queued).  There are however some cases where an
event-handler or slot can be executed unexpectedly, between two lines
of source code.  If it changes data items or objects you are currently
accessing, some <U>very</U> weird and hard-to-find bugs can result,
ranging from the hero running amok to a full-on "Segmentation Fault"
crash.  The following are cases where this kind of thing can happen:
<UL>
<LI>When you "emit" a signal or invoke a procedure that has been defined
as a signal, <U>all</U> procedures that have been linked to it by a
"connect" will be executed <U>before</U> the next line of source code.  It
is easy to forget that when programming.
<P>
For example,
the signal "caughtHero()" is connected to slot "herosDead()", which
radically changes the state of the game, so "emit caughtHero();" is
<U>always</U> followed by a "return".
<P>
</LI>
<LI>In some places KGoldrunner invokes "qApp->processEvents()", which
causes all queued events to occur immediately, including any waiting
timer or mouse events.  Usually the idea is to get "QMainWindow", etc. to
re-organize the main window correctly (e.g. when going in and out of
Edit mode).  The boolean flag called "loading" causes user actions
to be ignored while the window is being re-constructed or a level
is being loaded.
<P>
</LI>
<LI>There seem to be some rare cases where a Qt library procedure will
emit a signal and cause one of your slots to execute unexpectedly.  For
example, inserting the first line of text in a list box (class QListBox),
can cause a "highlighted" signal.
</LI>
</UL>
<H3>The Main Modules of KGoldrunner</H3>
<UL>
<LI><B>main</B> simply sets up the KGoldrunner window, sets the font
and starts the application event loop.  This also seems to be the place
to initialise language translation in later versions.
</LI>
<P>
<LI><B>kgoldrunner</B> is the user interface.  It implements all menus,
buttons and dialog boxes, referees play, keeps score and loads or reloads
levels.  It also keeps track of high scores, saves games, loads games,
implements the game editor and contains the Qt 2 help browser.
</LI>
<P>
<LI><B>kgoldrunnerwidget</B> provides the playing area in which levels and
animation are drawn.  It also handles mouse events and paints or repaints
the playing area's frame and title.
</LI>
<P>
<LI><B>kgrobj</B> contains the classes and methods that implement game
play.
<P>
The class KGrObj and its descendants display the various objects
in the game and im[plement their behaviour (e.g. bricks, ladders, gold,
hidden ladders, etc.).
<P>
The class KGrFigure and its descendants KGrHero and KGrEnemy
display the hero and enemies and implement all their
movement and the rules controlling that movement.  Timer events
implement animation and the key methods are "startWalk", "walkTimeDone",
"initFall" and "fallTimeDone".  Enemies also have "captiveTimeDone"
and their search strategy is implemented by "searchbestway".
</LI>
</UL>
<H3>The "games.dat" File Format</H3>
The "games.dat" files are stored in the KGoldrunner System and User data
area, as documented in the Installation section and above.  The file in
the System area lists System games and the file in the User area (if any)
lists games belonging to the logged in user.
<P>
Each game in each file is represented by one line or two lines of
text.
<P>
The second line is optional and contains a description of the
game, that is displayed by clicking the "More" button in the
Level Selection Dialog box.  The text is automatically word-wrapped
when it is displayed.  Paragraph breaks are represented by the
characters "\n\n" (i.e. the "newline" characters as represented
in C and C++).
<P>
The first (maybe the only) line contains four fields, separated by a
space, as follows:
<OL>
<LI>The number of levels in the game,
</LI>
<LI>The rules the game uses (K = KGoldrunner and T = Traditional),
</LI>
<LI>The filename prefix for the game (1-5 lower case alphabetic characters),
</LI>
<LI>The name of the game (on the rest of line: can include spaces).
</LI>
</OL>
<H3>The "levels" File Format</H3>
Levels files are all stored in the "levels" sub-directory in the KGoldrunner
System or User data area, as documented in the Installation section and
above.  They all have names of the form "prefixNNN.grl", where "prefix"
is the game's filename prefix (e.g. "tute" or "plws") and NNN is a
3-digit level number (e.g. "tute008.grl" is level 8 of the Tutorial
game).  Level numbers should always start at 001 and be consecutive,
up to the number of levels in the game.  If they are not, KGoldrunner
will issue a warning message.
<P>
An exception is the special file "level000.grl", which <U>must</U> be
present in the System levels sub-directory.  It contains the "ENDE" screen,
which appears when the game is over ("ENDE" is German for "END").
<P>
Each level file is a text-file, containing one or more lines as follows:
<OL>
<LI>This line contains exactly 560 characters, representing the 20 rows
of 28 objects in the level's starting position.  The codings are defined
in "kgrobj.h" and are documented under "Keyboard Short-Cuts" at the
end of the <A HREF="editor.htm">Game Editor</A> section.
</LI>
<P>
<LI>(<U>optional</U>) The name of the level appears here.  The line is empty
if there is a hint but no name.
</LI>
<P>
<LI>(<U>optional</U>) The hint for the level appears on this and subsequent
lines.  The text is automatically word-wrapped when it is displayed,
so each paragraph should be on one line only, with a blank line between
paragraphs.  The display widget has a scrollbar and can handle any
amount of text.
</LI>
</OL>
<H3>The High-Score File Format</H3>
Released high-score files for the System games are stored in the System
data area, but are "read-only".  The System file for high scores in a
game is copied to the User data area and the user's high score is added,
whenever the user first achieves a high score for that game.  After that,
all high scores achieved are added to the User copy of the high-score
file.  High-score file names are of the form "hi_prefix.dat", where
"prefix" is the game's filename prefix (e.g. "tute" or "plws").
<P>
The file is recorded in the portable binary data format implemented
by the Qt library's QDataStream class.  There are up to 10 records,
in descending order of score achieved, and each record contains four
fields as follows:
<OL>
<LI>The user's name (string),
</LI>
<LI>The level achieved (16-bit integer),
</LI>
<LI>The score achieved (32-bit integer),
</LI>
<LI>The date and time when the score was achieved (string).
</LI>
</OL>
<H3>The Saved-Game File Format</H3>
The saved game file is stored in the User data area and its name is
"savegame.dat".  It is a text file, with one line per save, and up
to 30 game positions can be saved.  The most recent save
is first and the oldest is last.  Each line contains seven
formatted columns as follows:
<OL>
<LI>The filename prefix of the game saved,
</LI>
<LI>The level reached,
</LI>
<LI>The number of lives left,
</LI>
<LI>The score,
</LI>
<LI>The day of the week,
</LI>
<LI>The date, in YYYY-MM-DD format,
</LI>
<LI>The time, in HH:MM format.
</LI>
</OL>
When this file is displayed, with column headings, the filename prefix
is used to look up the name of each game in the games list (as loaded
from "games.dat" when KGoldrunner starts).
<P ALIGN="RIGHT">
<HR WIDTH="100%" SIZE=3 ALIGN=CENTER NOSHADE>
<A HREF="index.htm">HOME</A> |
<B>Previous</B> <A HREF="install.htm">Installation</A>
</P>
</FONT>

</TR></TD></TABLE>
</BODY>
</HTML>
